def _missing_values(df: pd.DataFrame, label_col, **add_params) -> pd.DataFrame:
    """
    Imputes missing values on given pandas DataFrame
    :param df: DataFrame
    :return: DataFrame
    """

    {% if data.missing_values == 'MEAN' %}
    return df.fillna(df.mean(), inplace=False)
    {% elif data.missing_values == 'MEDIAN' %}
    return df.fillna(df.median(), inplace=False)
    {% else %}
    # create arrays from dataframe
    y = df[label_col]
    df = df.drop(label_col, axis=1, inplace=False)
    feature_cols = list(df.columns)
    features = df.values

    {% if data.missing_values == 'KNN' %}
    imputer = KNN(**add_params)
    {% elif data.missing_values == 'NUCLEAR_NORM_MINIMIZATION' %}
    imputer = NuclearNormMinimization(**add_params)
    {% elif data.missing_values == 'SOFT' %}
    imputer = SoftImpute(**add_params)
    {% elif data.missing_values == 'ITERATIVE' %}
    imputer = IterativeImputer(**add_params)
    {% elif data.missing_values == 'BI_SCALER' %}
    imputer = BiScaler(**add_params)
    {% endif %}

    # impute values
    features = imputer.fit_transform(features)

    ret_df = pd.DataFrame(features, columns=feature_cols)
    ret_df[label_col] = pd.Series(y)

    return ret_df
    {% endif %}
