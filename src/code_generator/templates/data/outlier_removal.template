def _outlier_removal(df: pd.DataFrame, label_col, **add_params) -> pd.DataFrame:
    """
    {% if data.outlier == 'ISF'%}
    For given data frame, removes detected outliers using Isolation Forest Classifier.
    {% elif data.outlier == 'LOF'%}
    For given data frame, removes detected outliers using Local Outlier Factor.
    {% else %}
    {% endif %}

    :param df: DataFrame
    :return: DataFrame with removed outliers
    """

    y = np.ravel(df[label_col])
    X = df.drop(label_col, axis=1)
    feature_cols = list(X.columns)
    X = X.values

    {% if data.outlier == 'ISF'%}
    clf = IsolationForest(behaviour='new', random_state=42, n_jobs=-1, **add_params)
    {% elif data.outlier == 'LOF' %}
    clf = LocalOutlierFactor(n_jobs=-1, **add_params)
    {% else %}
    {% endif %}

    results = clf.fit_predict(X)

    outliers = len(list(filter(lambda x: x == -1, results)))
    print("Model found {} outliers".format(outliers))

    removing_indices = [i for i in range(0, len(results)) if results[i] == -1]
    X_new = np.delete(X, removing_indices, axis=0)
    y_new = [y[yi] for yi in range(0, len(y)) if results[yi] == 1]

    ret_df = pd.DataFrame(X_new, columns=feature_cols)
    ret_df[label_col] = y_new
    return ret_df
